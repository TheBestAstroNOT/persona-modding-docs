# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  doc(relativePath: String): Doc!
  docConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: DocFilter): DocConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
}

input DocumentFilter {
  doc: DocFilter
  post: PostFilter
  pages: PagesFilter
  settings: SettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Doc | Post | Pages | Settings | Folder

type Doc implements Node & Document {
  title: String!
  description: String
  tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input DocBodyAdmonitionFilter {
  type: StringFilter
  title: StringFilter
  children: RichTextFilter
}

input DocBodyDetailsFilter {
  summary: StringFilter
  children: RichTextFilter
}

input DocBodyCodeBlockFilter {
  title: StringFilter
  language: StringFilter
  children: RichTextFilter
}

input DocBodyTabsChildrenTabItemFilter {
  label: StringFilter
  value: StringFilter
  children: StringFilter
}

input DocBodyTabsChildrenFilter {
  TabItem: DocBodyTabsChildrenTabItemFilter
}

input DocBodyTabsFilter {
  children: DocBodyTabsChildrenFilter
}

input DocBodyDocCardListFilter {
  title: StringFilter
}

input DocBodyFilter {
  Admonition: DocBodyAdmonitionFilter
  Details: DocBodyDetailsFilter
  CodeBlock: DocBodyCodeBlockFilter
  Tabs: DocBodyTabsFilter
  DocCardList: DocBodyDocCardListFilter
}

input DocFilter {
  title: StringFilter
  description: StringFilter
  tags: StringFilter
  body: DocBodyFilter
}

type DocConnectionEdges {
  cursor: String!
  node: Doc
}

type DocConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocConnectionEdges]
}

type PostAuthors {
  name: String!
  title: String
  url: String
  image_url: String
}

type Post implements Node & Document {
  title: String!
  authors: [PostAuthors]
  date: String!
  tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PostAuthorsFilter {
  name: StringFilter
  title: StringFilter
  url: StringFilter
  image_url: StringFilter
}

input PostBodyAdmonitionFilter {
  type: StringFilter
  title: StringFilter
  children: RichTextFilter
}

input PostBodyDetailsFilter {
  summary: StringFilter
  children: RichTextFilter
}

input PostBodyCodeBlockFilter {
  title: StringFilter
  language: StringFilter
  children: RichTextFilter
}

input PostBodyTabsChildrenTabItemFilter {
  label: StringFilter
  value: StringFilter
  children: StringFilter
}

input PostBodyTabsChildrenFilter {
  TabItem: PostBodyTabsChildrenTabItemFilter
}

input PostBodyTabsFilter {
  children: PostBodyTabsChildrenFilter
}

input PostBodyDocCardListFilter {
  title: StringFilter
}

input PostBodyFilter {
  Admonition: PostBodyAdmonitionFilter
  Details: PostBodyDetailsFilter
  CodeBlock: PostBodyCodeBlockFilter
  Tabs: PostBodyTabsFilter
  DocCardList: PostBodyDocCardListFilter
}

input PostFilter {
  title: StringFilter
  authors: PostAuthorsFilter
  date: StringFilter
  tags: StringFilter
  body: PostBodyFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Pages implements Node & Document {
  title: String!
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PagesBodyAdmonitionFilter {
  type: StringFilter
  title: StringFilter
  children: RichTextFilter
}

input PagesBodyDetailsFilter {
  summary: StringFilter
  children: RichTextFilter
}

input PagesBodyCodeBlockFilter {
  title: StringFilter
  language: StringFilter
  children: RichTextFilter
}

input PagesBodyTabsChildrenTabItemFilter {
  label: StringFilter
  value: StringFilter
  children: StringFilter
}

input PagesBodyTabsChildrenFilter {
  TabItem: PagesBodyTabsChildrenTabItemFilter
}

input PagesBodyTabsFilter {
  children: PagesBodyTabsChildrenFilter
}

input PagesBodyDocCardListFilter {
  title: StringFilter
}

input PagesBodyFilter {
  Admonition: PagesBodyAdmonitionFilter
  Details: PagesBodyDetailsFilter
  CodeBlock: PagesBodyCodeBlockFilter
  Tabs: PagesBodyTabsFilter
  DocCardList: PagesBodyDocCardListFilter
}

input PagesFilter {
  title: StringFilter
  description: StringFilter
  body: PagesBodyFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type SettingsLogo {
  alt: String
  src: String
}

union SettingsNavbarDocLink = Doc

union SettingsNavbarPageLink = Pages

union SettingsNavbarItemsDocLink = Doc

union SettingsNavbarItemsPageLink = Pages

union SettingsNavbarItemsItemsDocLink = Doc

union SettingsNavbarItemsItemsPageLink = Pages

type SettingsNavbarItemsItems {
  label: String!
  link: String
  docLink: SettingsNavbarItemsItemsDocLink
  pageLink: SettingsNavbarItemsItemsPageLink
  externalLink: String
  position: String!
}

type SettingsNavbarItems {
  label: String!
  link: String
  docLink: SettingsNavbarItemsDocLink
  pageLink: SettingsNavbarItemsPageLink
  externalLink: String
  position: String!
  items: [SettingsNavbarItemsItems]
}

type SettingsNavbar {
  label: String!
  link: String
  docLink: SettingsNavbarDocLink
  pageLink: SettingsNavbarPageLink
  externalLink: String
  position: String!
  items: [SettingsNavbarItems]
}

union SettingsFooterLinksItemsInternalTo = Doc | Post | Pages

type SettingsFooterLinksItemsInternal {
  label: String
  to: SettingsFooterLinksItemsInternalTo
}

type SettingsFooterLinksItemsBlog {
  label: String
}

type SettingsFooterLinksItemsExternal {
  label: String
  href: String
}

union SettingsFooterLinksItems = SettingsFooterLinksItemsInternal | SettingsFooterLinksItemsBlog | SettingsFooterLinksItemsExternal

type SettingsFooterLinks {
  title: String
  items: [SettingsFooterLinksItems]
}

type SettingsFooter {
  style: String
  links: [SettingsFooterLinks]
  copyright: String
}

type Settings implements Node & Document {
  _warning: String
  label: String!
  logo: SettingsLogo
  title: String!
  tagline: String
  url: String!
  navbar: [SettingsNavbar]
  footer: SettingsFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SettingsLogoFilter {
  alt: StringFilter
  src: ImageFilter
}

input SettingsNavbarDocLinkFilter {
  doc: DocFilter
}

input SettingsNavbarPageLinkFilter {
  pages: PagesFilter
}

input SettingsNavbarItemsDocLinkFilter {
  doc: DocFilter
}

input SettingsNavbarItemsPageLinkFilter {
  pages: PagesFilter
}

input SettingsNavbarItemsItemsDocLinkFilter {
  doc: DocFilter
}

input SettingsNavbarItemsItemsPageLinkFilter {
  pages: PagesFilter
}

input SettingsNavbarItemsItemsFilter {
  label: StringFilter
  link: StringFilter
  docLink: SettingsNavbarItemsItemsDocLinkFilter
  pageLink: SettingsNavbarItemsItemsPageLinkFilter
  externalLink: StringFilter
  position: StringFilter
}

input SettingsNavbarItemsFilter {
  label: StringFilter
  link: StringFilter
  docLink: SettingsNavbarItemsDocLinkFilter
  pageLink: SettingsNavbarItemsPageLinkFilter
  externalLink: StringFilter
  position: StringFilter
  items: SettingsNavbarItemsItemsFilter
}

input SettingsNavbarFilter {
  label: StringFilter
  link: StringFilter
  docLink: SettingsNavbarDocLinkFilter
  pageLink: SettingsNavbarPageLinkFilter
  externalLink: StringFilter
  position: StringFilter
  items: SettingsNavbarItemsFilter
}

input SettingsFooterLinksItemsInternalToFilter {
  doc: DocFilter
  post: PostFilter
  pages: PagesFilter
}

input SettingsFooterLinksItemsInternalFilter {
  label: StringFilter
  to: SettingsFooterLinksItemsInternalToFilter
}

input SettingsFooterLinksItemsBlogFilter {
  label: StringFilter
}

input SettingsFooterLinksItemsExternalFilter {
  label: StringFilter
  href: StringFilter
}

input SettingsFooterLinksItemsFilter {
  internal: SettingsFooterLinksItemsInternalFilter
  blog: SettingsFooterLinksItemsBlogFilter
  external: SettingsFooterLinksItemsExternalFilter
}

input SettingsFooterLinksFilter {
  title: StringFilter
  items: SettingsFooterLinksItemsFilter
}

input SettingsFooterFilter {
  style: StringFilter
  links: SettingsFooterLinksFilter
  copyright: StringFilter
}

input SettingsFilter {
  _warning: StringFilter
  label: StringFilter
  logo: SettingsLogoFilter
  title: StringFilter
  tagline: StringFilter
  url: StringFilter
  navbar: SettingsNavbarFilter
  footer: SettingsFooterFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateDoc(relativePath: String!, params: DocMutation!): Doc!
  createDoc(relativePath: String!, params: DocMutation!): Doc!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
}

input DocumentUpdateMutation {
  doc: DocMutation
  post: PostMutation
  pages: PagesMutation
  settings: SettingsMutation
  relativePath: String
}

input DocumentMutation {
  doc: DocMutation
  post: PostMutation
  pages: PagesMutation
  settings: SettingsMutation
}

input DocMutation {
  title: String
  description: String
  tags: [String]
  body: JSON
}

input PostAuthorsMutation {
  name: String
  title: String
  url: String
  image_url: String
}

input PostMutation {
  title: String
  authors: [PostAuthorsMutation]
  date: String
  tags: [String]
  body: JSON
}

input PagesMutation {
  title: String
  description: String
  body: JSON
}

input SettingsLogoMutation {
  alt: String
  src: String
}

input SettingsNavbarItemsItemsMutation {
  label: String
  link: String
  docLink: String
  pageLink: String
  externalLink: String
  position: String
}

input SettingsNavbarItemsMutation {
  label: String
  link: String
  docLink: String
  pageLink: String
  externalLink: String
  position: String
  items: [SettingsNavbarItemsItemsMutation]
}

input SettingsNavbarMutation {
  label: String
  link: String
  docLink: String
  pageLink: String
  externalLink: String
  position: String
  items: [SettingsNavbarItemsMutation]
}

input SettingsFooterLinksItemsInternalMutation {
  label: String
  to: String
}

input SettingsFooterLinksItemsBlogMutation {
  label: String
}

input SettingsFooterLinksItemsExternalMutation {
  label: String
  href: String
}

input SettingsFooterLinksItemsMutation {
  internal: SettingsFooterLinksItemsInternalMutation
  blog: SettingsFooterLinksItemsBlogMutation
  external: SettingsFooterLinksItemsExternalMutation
}

input SettingsFooterLinksMutation {
  title: String
  items: [SettingsFooterLinksItemsMutation]
}

input SettingsFooterMutation {
  style: String
  links: [SettingsFooterLinksMutation]
  copyright: String
}

input SettingsMutation {
  _warning: String
  label: String
  logo: SettingsLogoMutation
  title: String
  tagline: String
  url: String
  navbar: [SettingsNavbarMutation]
  footer: SettingsFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
